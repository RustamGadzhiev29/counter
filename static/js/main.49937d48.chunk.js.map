{"version":3,"sources":["components/Button/Button.module.css","reportWebVitals.ts","components/counterSetting/SettingDisplay.tsx","components/counter/Display.tsx","components/Button/Button.tsx","state/counter-reducer.ts","AppWithRedux.tsx","state/store.ts","utils/localStorage-utils.ts","index.tsx","components/counterSetting/CounterSetting.module.css","components/counter/Display.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SettingDisplay","props","inputErrorStyle","maxValue","startValue","s","inputError","input","className","counterSettings","inputBlock","value","onChange","e","onChangeMaxValue","currentTarget","valueAsNumber","type","max","min","onChangeStartValue","Display","countStyle","displayValue","counterMessage","maxCountStyle","valueStyle","Button","buttonStyle","disabled","onClick","callBack","title","initialState","count","resDisable","setDisable","incDisable","AppWithRedux","preloadedState","dispatch","useDispatch","state","useSelector","counter","payload","ChangeMaxValueAC","ChangeStartValueAC","rootReducer","combineReducers","action","newState","newMaxCount","newStartCount","currentCount","persistedTodoString","localStorage","getItem","JSON","parse","serializedState","err","loadState","store","createStore","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49937d48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonStyle\":\"Button_buttonStyle__1CoVS\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"../counterSetting/CounterSetting.module.css\"\r\n\r\ntype DisplayPropsType = {\r\n    onChangeMaxValue: (maxValue: number) => void\r\n    onChangeStartValue: (onsetValue: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport function SettingDisplay(props: DisplayPropsType) {\r\n//\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeMaxValue(e.currentTarget.valueAsNumber)\r\n    }\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeStartValue(e.currentTarget.valueAsNumber)\r\n    }\r\n    const inputErrorStyle = props.maxValue <= props.startValue || props.maxValue <= 0 || props.startValue < 0 ? s.inputError : s.input\r\n\r\n    return (\r\n        <div className={s.counterSettings}>\r\n            <div className={s.inputBlock}>\r\n                 <span>\r\n            max value:\r\n                <input value={props.maxValue} className={inputErrorStyle} onChange={onChangeMaxValue} type={'number'} max={'99'}\r\n                       min={'-99'}/>\r\n            </span>\r\n                <span>\r\n            start value:\r\n            <input value={props.startValue} className={inputErrorStyle} onChange={onChangeStartValue} type={'number'} max={'99'}\r\n                   min={'-99'}/>\r\n            </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"../counter/Display.module.css\"\r\n\r\ntype DisplayPropsType = {\r\n    displayValue: number\r\n    maxValue: number\r\n    counterMessage: 'press set' | 'incorrect number' | null\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n    const classOfDisplay = () => {\r\n        if (props.displayValue === props.maxValue\r\n            || props.counterMessage === 'incorrect number'\r\n            || props.displayValue < 0)\r\n        {\r\n            return s.maxCountStyle\r\n        }\r\n        if (props.counterMessage === 'press set') {\r\n            return s.valueStyle\r\n        } else return s.valueStyle\r\n    }\r\n    return (\r\n        <div className={s.countStyle} >\r\n            <div className={classOfDisplay()}>\r\n                {props.counterMessage ? props.counterMessage : props.displayValue}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Button.module.css\"\r\nexport type PropsType = {\r\n    callBack: ()=>void\r\n    title:string\r\n    disabled:boolean\r\n\r\n}\r\n\r\nexport function Button (props:PropsType) {\r\n    return (\r\n        <button className={s.buttonStyle}  disabled={props.disabled} onClick={()=> props.callBack()}>\r\n            {props.title}\r\n        </button>\r\n    )\r\n}","type StateType = {\r\n    startValue: number\r\n    maxValue: number\r\n    count: number\r\n    counterMessage: 'press set' | 'incorrect number' | null\r\n    resDisable: boolean\r\n    setDisable: boolean\r\n    incDisable: boolean\r\n}\r\ntype IncDataActionType = ReturnType<typeof IncDataAC>\r\ntype ResDataActionType = ReturnType<typeof ResDataAC>\r\ntype ChangeMaxValueActionType = ReturnType<typeof ChangeMaxValueAC>\r\ntype ChangeStartValueActionType = ReturnType<typeof ChangeStartValueAC>\r\ntype OnSetValueActionType = ReturnType<typeof OnSetValueAC>\r\ntype SetDisplayValueActionType = ReturnType<typeof SetDisplayValueAC>\r\n\r\n\r\nexport const IncDataAC = () => {\r\n    return {\r\n        type: 'INC-DATA',\r\n    } as const\r\n}\r\nexport const ResDataAC = () => {\r\n    return {\r\n        type: 'RES-DATA',\r\n    } as const\r\n}\r\nexport const ChangeMaxValueAC = (maxValue: number) => {\r\n    return {\r\n        type: 'CHANGE-MAX-VALUE',\r\n        payload: {\r\n            maxValue\r\n        }\r\n    } as const\r\n}\r\nexport const ChangeStartValueAC = (startValue: number) => {\r\n    return {\r\n        type: 'CHANGE-START-VALUE',\r\n        payload: {\r\n            startValue\r\n        }\r\n    } as const\r\n}\r\nexport const OnSetValueAC = () => {\r\n    return {\r\n        type: 'ON-SET-VALUE',\r\n    } as const\r\n}\r\nexport const SetDisplayValueAC = (newMaxCount: number, newStartCount: number, currentCount:number) => {\r\n    return {\r\n        type: 'SET-DISPLAY-VALUE',\r\n        payload: {\r\n            newMaxCount,\r\n            newStartCount,\r\n            currentCount\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ActionsType =\r\n    IncDataActionType\r\n    | ResDataActionType\r\n    | ChangeMaxValueActionType\r\n    | ChangeStartValueActionType\r\n    | OnSetValueActionType\r\n    | SetDisplayValueActionType\r\n\r\nconst initialState: StateType = {\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    count: 0,\r\n    resDisable: true,\r\n    setDisable: false,\r\n    incDisable: true,\r\n    counterMessage: null\r\n}\r\n\r\n\r\nexport const counterReducer = (state: StateType = initialState, action: ActionsType): StateType => {\r\n    switch (action.type) {\r\n        case 'INC-DATA': {\r\n            let newState = {...state}\r\n            newState.count = state.count + 1\r\n            if (state.count < state.maxValue) {\r\n                (newState = {...state, count: newState.count})\r\n            }\r\n            if (newState.count === state.maxValue) {\r\n                (newState = {...state, count: newState.count, incDisable: true})\r\n            }\r\n            return newState;\r\n        }\r\n        case 'RES-DATA': {\r\n            return {...state, count: state.startValue, incDisable: false}\r\n        }\r\n        case 'CHANGE-MAX-VALUE': {\r\n            if (action.payload.maxValue < 0 || state.startValue === action.payload.maxValue || action.payload.maxValue < state.startValue)\r\n                return {\r\n                    ...state,\r\n                    maxValue: action.payload.maxValue,\r\n                    setDisable: true,\r\n                    counterMessage: \"incorrect number\",\r\n                    incDisable: true,\r\n                    resDisable: true\r\n                }\r\n            else return {\r\n                ...state,\r\n                count: 0,\r\n                maxValue: action.payload.maxValue,\r\n                setDisable: false,\r\n                counterMessage: \"press set\",\r\n                incDisable: true,\r\n                resDisable: true,\r\n            }\r\n        }\r\n        case 'CHANGE-START-VALUE' : {\r\n            if (action.payload.startValue < 0 || action.payload.startValue === state.maxValue || action.payload.startValue > state.maxValue)\r\n                return {\r\n                    ...state,\r\n                    startValue: action.payload.startValue,\r\n                    setDisable: true,\r\n                    counterMessage: \"incorrect number\",\r\n                    incDisable: true,\r\n                    resDisable: true\r\n\r\n                }\r\n            else return {\r\n                ...state,\r\n                count: 0,\r\n                startValue: action.payload.startValue,\r\n                setDisable: false,\r\n                counterMessage: \"press set\",\r\n                incDisable: true,\r\n                resDisable: true\r\n            }\r\n        }\r\n        case 'ON-SET-VALUE': {\r\n            return {\r\n                ...state,\r\n                count: state.startValue,\r\n                setDisable: true,\r\n                counterMessage: null,\r\n                resDisable: false,\r\n                incDisable: false\r\n            }\r\n        }\r\n\r\n        case 'SET-DISPLAY-VALUE': {\r\n            return {\r\n                ...state,\r\n                maxValue: action.payload.newMaxCount,\r\n                startValue: action.payload.newStartCount,\r\n                count:action.payload.currentCount,\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// export const IncDataThunkCreator = () => (dispatch: (action: ActionsType) => void, getState: () => AppRootStateType) => {\r\n//     let currentCount = getState().counter.count\r\n//     localStorage.setItem('currentCount', JSON.stringify(currentCount + 1))\r\n//     dispatch(IncDataAC())\r\n// }\r\n//\r\n// export const ResDataThunkCreator = () => (dispatch: (action: ActionsType) => void) => {\r\n//     localStorage.clear()\r\n//     dispatch(ResDataAC())\r\n// }\r\n//\r\n// export const ChangeMaxValueThunkCreator = (maxValue: number) => (dispatch: (action: ActionsType) => void) => {\r\n//     localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n//     dispatch(ChangeMaxValueAC(maxValue))\r\n// }\r\n//\r\n// export const ChangeStartValueThunkCreator = (startValue: number) => (dispatch: (action: ActionsType) => void) => {\r\n//     localStorage.setItem('startValue', JSON.stringify(startValue))\r\n//     dispatch(ChangeStartValueAC(startValue))\r\n// }\r\n//\r\n// export const SetDataFromLocalstorageThunkCreator = () => (dispatch: (action: ActionsType) => void) => {\r\n//     let countAsStringMaxValue = localStorage.getItem('maxValue')\r\n//     let countAsStringStartValue = localStorage.getItem('startValue')\r\n//     let countAsStringCurrentValue = localStorage.getItem('currentCount')\r\n//\r\n//     if (countAsStringMaxValue && countAsStringStartValue && countAsStringCurrentValue) {\r\n//         let newMaxCount = JSON.parse(countAsStringMaxValue)\r\n//         let newStartCount = JSON.parse(countAsStringStartValue)\r\n//         let currentCount = JSON.parse(countAsStringCurrentValue)\r\n//         dispatch(SetDisplayValueAC(newMaxCount, newStartCount, currentCount))\r\n//     }\r\n// }","import React, {useEffect} from 'react';\r\nimport './App.css';\r\n\r\nimport {SettingDisplay} from \"./components/counterSetting/SettingDisplay\";\r\nimport {Display} from \"./components/counter/Display\";\r\nimport {Button} from \"./components/Button/Button\";\r\nimport {\r\n    ChangeMaxValueAC, ChangeStartValueAC,\r\n    IncDataAC,\r\n    OnSetValueAC, ResDataAC,\r\n\r\n} from \"./state/counter-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AnyAction} from \"redux\";\r\n\r\nexport type StateType = {\r\n    startValue: number\r\n    maxValue: number\r\n    count: number\r\n    counterMessage: 'press set' | 'incorrect number' | null\r\n    resDisable: boolean\r\n    setDisable: boolean\r\n    incDisable: boolean\r\n}\r\nexport type TypedDispatch = ThunkDispatch<AppRootStateType, any, AnyAction>;\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const dispatch = useDispatch<TypedDispatch>() // типизировал диспач из https://github.com/reduxjs/redux-toolkit/issues/587\r\n\r\n    const state = useSelector<AppRootStateType, StateType>(state => state.counter)\r\n\r\n    // при загрузке приложения стартовое, максимальное и текущее значения получаются из localstorage\r\n    // useEffect(() => {\r\n    //     dispatch(SetDataFromLocalstorageThunkCreator())\r\n    // }, [])\r\n\r\n// счетчик\r\n    let incData = () => {\r\n        dispatch(IncDataAC())\r\n    }\r\n    // сброс настроек setting\r\n    let resData = () => {\r\n        dispatch(ResDataAC())\r\n    }\r\n\r\n    // изменение максимального значения в settings\r\n    let changeMaxValue = (maxValue: number) => {\r\n        dispatch(ChangeMaxValueAC(maxValue))\r\n    }\r\n// изменение стартового значения в settings\r\n    let changeStartValue = (startValue: number) => {\r\n        dispatch(ChangeStartValueAC(startValue))\r\n    }\r\n    // обработчик для кнопки set в settings\r\n    let onSetValue = () => {\r\n        dispatch(OnSetValueAC())\r\n    }\r\n    return (\r\n        <div className=\"appWrapper\">\r\n            <div className=\"counterSettings\">\r\n                <div>\r\n                    <SettingDisplay\r\n                        startValue={state.startValue}\r\n                        maxValue={state.maxValue}\r\n                        onChangeMaxValue={changeMaxValue}\r\n                        onChangeStartValue={changeStartValue}\r\n                    />\r\n                </div>\r\n                <div className=\"buttonBlock\">\r\n                    <Button\r\n                        callBack={() => onSetValue()}\r\n                        title={\"Set\"}\r\n                        disabled={state.setDisable}/>\r\n                    {/*<ButtonSet disable={state.setDisable} value={\"Set\"} displayValue={state.count}*/}\r\n                    {/*           onSetValue={onSetValue}/>*/}\r\n                </div>\r\n            </div>\r\n            <div className=\"Counter\">\r\n                <div>\r\n                    <Display maxValue={state.maxValue}\r\n                             displayValue={state.count}\r\n                             counterMessage={state.counterMessage}/>\r\n                </div>\r\n                <div className=\"buttonBlock\">\r\n                    <Button\r\n                        callBack={() => incData()}\r\n                        title={\"Inc\"}\r\n                        disabled={state.incDisable}/>\r\n                    <Button\r\n                        callBack={() => resData()}\r\n                        title={\"Reset\"}\r\n                        disabled={state.resDisable}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {applyMiddleware, combineReducers} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { legacy_createStore as createStore} from 'redux'\r\nimport {loadState, saveState} from \"../utils/localStorage-utils\";\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer,\r\n})\r\nlet preloadedState;\r\n\r\nconst persistedTodoString = localStorage.getItem('app-state')\r\nif (persistedTodoString) {\r\n    preloadedState=JSON.parse(persistedTodoString)\r\n}\r\nconst persistedState = loadState(); // подгружаем значение с localStorage\r\n\r\nexport const store = createStore(rootReducer, preloadedState, applyMiddleware(thunk))\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nstore.subscribe(()=>{\r\n    saveState({\r\n        counter: store.getState().counter // подписываемся  на каждое изменение state и записываем значение counter\r\n    });\r\n})\r\n// @ts-ignore\r\nwindow.store = store;","import {AppRootStateType} from \"../state/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\nexport const saveState = (state:AppRootStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport { store } from './state/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n    <AppWithRedux />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterSettings\":\"CounterSetting_counterSettings__hlCrN\",\"inputBlock\":\"CounterSetting_inputBlock__2cXg6\",\"input\":\"CounterSetting_input__p7JG3\",\"inputError\":\"CounterSetting_inputError__1NGb4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"valueStyle\":\"Display_valueStyle__26xlC\",\"countStyle\":\"Display_countStyle__3rg37\",\"maxCountStyle\":\"Display_maxCountStyle__92c11\"};"],"sourceRoot":""}